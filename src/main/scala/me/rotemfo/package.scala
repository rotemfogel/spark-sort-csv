package me

import org.apache.spark.sql.types._

/**
  * project: spark-app
  * package: me.rotemfo
  * file:    package
  * created: 2019-09-11
  * author:  rotem
  */
package object rotemfo {
  final private val aggregationsSchema = StructType(Array(
    StructField("timestamp", LongType, false),
    StructField("tenantid", LongType, false),
    StructField("serviceid", LongType, false),
    StructField("configurationid", LongType, false),
    StructField("modeid", IntegerType, false),
    StructField("dayid", IntegerType, false),
    StructField("hourid", IntegerType, false),
    StructField("recordid", LongType, false),
    StructField("name", StringType, false),
    StructField("stream", StringType, false),
    StructField("keys", StringType, false),
    StructField("data", StringType, false),
    StructField("func1", DoubleType, true),
    StructField("func2", DoubleType, true),
    StructField("func3", DoubleType, true),
    StructField("func4", DoubleType, true),
    StructField("windowtypeid", IntegerType, false),
    StructField("interval", IntegerType, false),
    StructField("advanceby", IntegerType, true),
    StructField("ingestiontime", LongType, false)
  ))

  final private val metricsSchema = StructType(Array(
    StructField("measuregroup", StringType, true),
    StructField("measuretype", StringType, true),
    StructField("measurename", StringType, false),
    StructField("measurecount", LongType, false),
    StructField("measuremin", DoubleType, true),
    StructField("measuremax", DoubleType, true),
    StructField("measuremean", DoubleType, true),
    StructField("measuremeanrate", DoubleType, true),
    StructField("timestamp", LongType, true),
    StructField("tenantid", LongType, true),
    StructField("serviceid", LongType, true),
    StructField("configurationid", LongType, true),
    StructField("entitytypeid", IntegerType, true),
    StructField("entityid", LongType, true)
  ))

  final private val servermetricsSchema = StructType(Array(
    StructField("timestamp", LongType, false),
    StructField("tenantid", LongType, false),
    StructField("serviceid", LongType, false),
    StructField("configurationid", LongType, false),
    StructField("modeid", IntegerType, false),
    StructField("host", StringType, false),
    StructField("metricname", StringType, false),
    StructField("dayid", IntegerType, false),
    StructField("hourid", IntegerType, false),
    StructField("recordid", LongType, false),
    StructField("serverhostuniqueid", StringType, false),
    StructField("metrictypeid", IntegerType, false),
    StructField("count", LongType, false),
    StructField("total", LongType, false),
    StructField("percentage", DoubleType, false)
  ))

  final private val transactionrecordsSchema = StructType(Array(
    StructField("timestamp", LongType, false),
    StructField("tenantid", LongType, false),
    StructField("serviceid", LongType, false),
    StructField("configurationid", LongType, false),
    StructField("modeid", IntegerType, false),
    StructField("recordid", LongType, false),
    StructField("transactionid", LongType, false)
  ))

  final private val transactionsSchema = StructType(Array(
    StructField("timestamp", LongType, false),
    StructField("tenantid", LongType, false),
    StructField("serviceid", LongType, false),
    StructField("configurationid", LongType, false),
    StructField("modeid", IntegerType, false),
    StructField("unitid", StringType, false),
    StructField("dayid", IntegerType, false),
    StructField("hourid", IntegerType, false),
    StructField("parserprotocol", StringType, true),
    StructField("transactionid", LongType, false),
    StructField("transaction", StringType, false),
    StructField("transactiontypeid", IntegerType, false),
    StructField("transactiontagid", IntegerType, false),
    StructField("transactionstarttime", LongType, false),
    StructField("transactionendtime", LongType, false),
    StructField("location", StringType, true)
  ))

  final private val recordsSchema = StructType(Array(
    StructField("tenantid", LongType, false),
    StructField("serviceid", LongType, false),
    StructField("recordid", LongType, false),
    StructField("parserprotocol", StringType, false),
    StructField("unitid", StringType, false),
    StructField("driverid", StringType, true),
    StructField("timestamp", LongType, false),
    StructField("ingestiontime", LongType, false),
    StructField("dayid", IntegerType, false),
    StructField("hourid", IntegerType, false),
    StructField("configurationid", LongType, false),
    StructField("modeid", IntegerType, false),
    StructField("recordsourceid", IntegerType, false),
    StructField("recordtargetid", IntegerType, false),
    StructField("recordtypeid", IntegerType, false),
    StructField("recordtagid", IntegerType, false),
    StructField("name", StringType, false),
    StructField("forbiddenrecord", IntegerType, true),
    StructField("sensitiverecord", IntegerType, true),
    StructField("reliablerecord", IntegerType, true),
    StructField("hasviolation", IntegerType, true),
    StructField("errorrecord", IntegerType, true),
    StructField("propertybag", StringType, true),
    StructField("sizebytes", LongType, true),
    StructField("alarm", StringType, true),
    StructField("battery", StringType, true),
    StructField("cellular", StringType, true),
    StructField("charger", StringType, true),
    StructField("configuration", StringType, true),
    StructField("doors", StringType, true),
    StructField("ecus", StringType, true),
    StructField("encryption", StringType, true),
    StructField("engine", StringType, true),
    StructField("gear", StringType, true),
    StructField("firmware", StringType, true),
    StructField("fuel", StringType, true),
    StructField("keys", StringType, true),
    StructField("lamps", StringType, true),
    StructField("location", StringType, true),
    StructField("message", StringType, true),
    StructField("motion", StringType, true),
    StructField("network", StringType, true),
    StructField("pedals", StringType, true),
    StructField("safety", StringType, true),
    StructField("tcu", StringType, true),
    StructField("temperature", StringType, true),
    StructField("tip", StringType, true),
    StructField("tires", StringType, true),
    StructField("user", StringType, true),
    StructField("wifi", StringType, true),
    StructField("windows", StringType, true),
    StructField("remotestart", StringType, true),
    StructField("drive", StringType, true),
    StructField("metadata", StringType, true),
    StructField("schemaversion", IntegerType, true),
    StructField("users", StringType, true)
  ))

  final private val violationsSchema = StructType(Array(
    StructField("timestamp", LongType, false),
    StructField("tenantid", LongType, false),
    StructField("serviceid", LongType, false),
    StructField("configurationid", LongType, false),
    StructField("modeid", IntegerType, false),
    StructField("unitid", StringType, true),
    StructField("dayid", IntegerType, false),
    StructField("hourid", IntegerType, false),
    StructField("recordid", LongType, false),
    StructField("propertybag", StringType, true),
    StructField("rawdata", StringType, true),
    StructField("parserprotocol", StringType, true),
    StructField("violationtypeid", IntegerType, false),
    StructField("violationtagid", IntegerType, false),
    StructField("violation", StringType, true),
    StructField("severityid", IntegerType, false),
    StructField("violationid", LongType, false),
    StructField("parentviolationid", LongType, false),
    StructField("violationstarttime", LongType, false),
    StructField("violationendtime", LongType, false),
    StructField("read", IntegerType, false),
    StructField("hidden", IntegerType, false),
    StructField("violationscopeid", IntegerType, false),
    StructField("originalviolation", StringType, true),
    StructField("violationsourceid", IntegerType, true),
    StructField("violationsubject", StringType, true),
    StructField("rulename", StringType, true),
    StructField("ruletypeid", IntegerType, true),
    StructField("ruleid", LongType, true),
    StructField("occurrences", IntegerType, true),
    StructField("encryption", StringType, true),
    StructField("messagevariables", StringType, true),
    StructField("location", StringType, true),
    StructField("messageformat", StringType, true),
    StructField("messagefactsavropropertybag", StringType, true),
    StructField("custommessageformat", StringType, true),
    StructField("multimessageformat", StringType, true),
    StructField("ruleuuid", StringType, true),
    StructField("affectedunits", IntegerType, true),
    StructField("highlights", StringType, true),
    StructField("aggregationstarttime", LongType, true),
    StructField("aggregationendtime", LongType, true),
    StructField("aggregationaffectedunits", IntegerType, true),
    StructField("aggregatedhighlights", StringType, true),
    StructField("aggregatedviolation", StringType, true),
    StructField("sessionviolationenabled", IntegerType, false),
    StructField("sessionviolationdurationoverrideseconds", IntegerType, true),
    StructField("aggregationenabled", IntegerType, false),
    StructField("aggregationdurationoverrideseconds", IntegerType, true),
    StructField("sessionviolationversion", IntegerType, true),
    StructField("ingestiontime", LongType, true),
    StructField("grouping", StringType, true),
    StructField("aggregationgrouping", StringType, true),
    StructField("profiletypeid", IntegerType, true),
    StructField("profileid", LongType, true),
    StructField("aggregationscopeid", IntegerType, false),
    StructField("violationunits", StringType, true),
    StructField("aggregationviolationunits", StringType, true),
    StructField("recordinfo", StringType, true),
    StructField("score", IntegerType, true)
  ))

  final val schemaMap = Map(
    "aggregations" -> aggregationsSchema,
    "metrics" -> metricsSchema,
    "servermetrics" -> servermetricsSchema,
    "transactionrecords" -> transactionrecordsSchema,
    "transactions" -> transactionsSchema,
    "records" -> recordsSchema,
    "violations" -> violationsSchema
  )
}
